import Head from 'next/head';
import {useState, useEffect} from 'react';
import {css} from '@emotion/css';
import {
  FormControl,
  FormLabel,
  FormErrorMessage,
  FormHelperText,
  Input,
} from '@chakra-ui/react';
import axios from 'axios';
import {useRouter} from 'next/router';
import {stripHtml, unicodeToChar, coolParse} from '../plugins';
import {Search2Icon, SettingsIcon} from '@chakra-ui/icons';

export default function Home({autoComplete}) {
  const [searchWord, setSearchWord] = useState('');
  const [isError, setIsError] = useState(false);

  const router = useRouter();

  useEffect(() => {
    // https://developers.google.com/search/docs/advanced/crawling/301-redirects
    if (searchWord) {
      router.push('/?q=' + searchWord);
    } else {
      router.push('/?q=');
    }
  }, [searchWord]);

  const handleInputChange = (e) => {
    setSearchWord(e.target.value);
  };

  const handleClick = (e) => {
    window.open(`${'https://google.com/search?q='}${searchWord}`);
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main
        className={css`
          width: 100%;
          max-width: 400px;
          margin: 0 auto;
          @media screen and (max-width: 768px) {
            max-width: 100%;
            padding: 0 10px 0;
          }
        `}
      >
        <FormControl isInvalid={isError}>
          <FormLabel htmlFor="search-box">Search Box</FormLabel>
          <div
            className={css`
              display: flex;
              justify-content: center;
              align-items: center;
            `}
          >
            <Input
              id="search-box"
              type="text"
              value={searchWord}
              onChange={handleInputChange}
            />
            <div
              className={css`
                margin: 0 0 0 10px;
                display: flex;
                justify-content: center;
                align-items: center;
                &:hover {
                  cursor: pointer;
                }
                @media screen and (max-width: 768px) {
                  display: none;
                }
              `}
              onClick={handleClick}
            >
              <Search2Icon w={6} h={6} />
            </div>
          </div>

          {!isError ? (
            <FormHelperText>
              Enter search word you&apos;d like to search.
            </FormHelperText>
          ) : (
            <FormErrorMessage>Invalid Search Words...</FormErrorMessage>
          )}
        </FormControl>
        {autoComplete &&
          autoComplete.map(([item], index) => {
            return (
              <div
                className={css`
                  padding: 10px 15px 10px;
                  display: flex;
                  justify-content: flex-start;
                  align-items: center;
                  &:hover {
                    background-color: #fafafa;
                    cursor: pointer;
                  }
                `}
                onClick={() => {
                  setSearchWord(stripHtml(item));
                }}
                key={index}
                dangerouslySetInnerHTML={{__html: item}}
              />
            );
          })}
        <div
          className={css`
            display: none;
            @media screen and (max-width: 768px) {
              display: block;
              position: fixed;
              bottom: 0;
              display: flex;
              justify-content: space-around;
              align-items: center;
              width: 100%;
            }
          `}
        >
          <div
            className={css`
              display: flex;
              justify-content: center;
              align-items: center;
            `}
            onClick={handleClick}
          >
            <Search2Icon w={8} h={8} />
          </div>
          <div
            className={css`
              display: flex;
              justify-content: center;
              align-items: center;
            `}
          >
            <SettingsIcon w={8} h={8} />
          </div>
        </div>
      </main>
    </div>
  );
}
export async function getServerSideProps(context) {
  const {query} = context;

  const data = await axios
    .get(
      encodeURI(
        `https://www.google.com/complete/search?q=${query.q}&client=gws-wiz&xssi=t`
      ),
      {responseType: 'arraybuffer', reponseEncoding: 'binary'}
    )
    .then((res) => {
      return unicodeToChar(res.data.toString('latin1'));
    });

  const content = JSON.parse(data.slice(5, data.length));

  return {
    props: {
      autoComplete: content[0],
    },
  };
}
